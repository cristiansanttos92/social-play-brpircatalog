
-- Create activities table
CREATE TABLE public.activities (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  type TEXT NOT NULL,
  metadata JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Enable RLS
ALTER TABLE public.activities ENABLE ROW LEVEL SECURITY;

-- Policies for activities
CREATE POLICY "Activities are viewable by authenticated users"
  ON public.activities FOR SELECT
  USING (auth.role() = 'authenticated');

-- Function to create an activity log
CREATE OR REPLACE FUNCTION public.log_activity(p_profile_id UUID, p_type TEXT, p_metadata JSONB)
RETURNS VOID AS $$
BEGIN
  INSERT INTO public.activities (profile_id, type, metadata)
  VALUES (p_profile_id, p_type, p_metadata);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to log game status changes
CREATE OR REPLACE FUNCTION public.handle_game_update_activity()
RETURNS TRIGGER AS $$
BEGIN
  -- Log activity only if status or rating has changed
  IF OLD.status IS DISTINCT FROM NEW.status OR OLD.rating IS DISTINCT FROM NEW.rating THEN
    PERFORM public.log_activity(
      NEW.profile_id,
      'game.update',
      jsonb_build_object(
        'game_id', NEW.id,
        'game_title', NEW.title,
        'old_status', OLD.status,
        'new_status', NEW.status,
        'old_rating', OLD.rating,
        'new_rating', NEW.rating
      )
    );
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_game_updated
  AFTER UPDATE ON public.games
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_game_update_activity();

-- Trigger to log new game additions
CREATE OR REPLACE FUNCTION public.handle_game_insert_activity()
RETURNS TRIGGER AS $$
BEGIN
  PERFORM public.log_activity(
    NEW.profile_id,
    'game.new',
    jsonb_build_object(
      'game_id', NEW.id,
      'game_title', NEW.title,
      'status', NEW.status
    )
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_game_inserted
  AFTER INSERT ON public.games
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_game_insert_activity();

-- Trigger to log new comments
CREATE OR REPLACE FUNCTION public.handle_comment_insert_activity()
RETURNS TRIGGER AS $$
DECLARE
  game_title_text TEXT;
BEGIN
  -- Get the game title
  SELECT title INTO game_title_text FROM public.games WHERE id = NEW.game_id;

  PERFORM public.log_activity(
    NEW.profile_id,
    'comment.new',
    jsonb_build_object(
      'game_id', NEW.game_id,
      'game_title', game_title_text,
      'comment_id', NEW.id
    )
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_comment_inserted
  AFTER INSERT ON public.comments
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_comment_insert_activity();
