
-- Create notifications table
CREATE TABLE public.notifications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL, -- The user who receives the notification
  actor_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL, -- The user who triggered the notification
  type TEXT NOT NULL,
  metadata JSONB,
  is_read BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Enable RLS
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- Policies for notifications
CREATE POLICY "Users can view their own notifications"
  ON public.notifications FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can mark their own notifications as read"
  ON public.notifications FOR UPDATE
  USING (auth.uid() = user_id);

-- Function to create a notification
CREATE OR REPLACE FUNCTION public.create_notification(p_user_id UUID, p_actor_id UUID, p_type TEXT, p_metadata JSONB)
RETURNS VOID AS $$
BEGIN
  -- Do not notify the user about their own actions
  IF p_user_id != p_actor_id THEN
    INSERT INTO public.notifications (user_id, actor_id, type, metadata)
    VALUES (p_user_id, p_actor_id, p_type, p_metadata);
  END IF;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to notify users about comments on the same game
CREATE OR REPLACE FUNCTION public.handle_new_comment_notification()
RETURNS TRIGGER AS $$
DECLARE
  commenter_profile_id UUID := NEW.profile_id;
  game_id_of_comment UUID := NEW.game_id;
  game_title_text TEXT;
  other_commenter RECORD;
BEGIN
  -- Get the game title
  SELECT title INTO game_title_text FROM public.games WHERE id = game_id_of_comment;

  -- Find other users who have commented on the same game
  FOR other_commenter IN 
    SELECT DISTINCT profile_id FROM public.comments
    WHERE game_id = game_id_of_comment AND profile_id != commenter_profile_id
  LOOP
    PERFORM public.create_notification(
      other_commenter.profile_id, -- The user to notify
      commenter_profile_id,       -- The user who acted
      'comment.reply',            -- The type of notification
      jsonb_build_object(         -- The metadata
        'game_id', game_id_of_comment,
        'game_title', game_title_text,
        'comment_id', NEW.id
      )
    );
  END LOOP;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_new_comment_notify_others
  AFTER INSERT ON public.comments
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_comment_notification();
